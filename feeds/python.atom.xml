<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Типичный Python разработчик - python</title><link href="https://dkurchigin.github.io/" rel="alternate"></link><link href="https://dkurchigin.github.io/feeds/python.atom.xml" rel="self"></link><id>https://dkurchigin.github.io/</id><updated>2023-07-29T16:00:00+03:00</updated><subtitle>О программировании, мелочах жизни и многом другом...</subtitle><entry><title>Первые шаги к PCEP-30-02</title><link href="https://dkurchigin.github.io/try-to-pcep" rel="alternate"></link><published>2023-07-29T16:00:00+03:00</published><updated>2023-07-29T16:00:00+03:00</updated><author><name>dkurchigin</name></author><id>tag:dkurchigin.github.io,2023-07-29:/try-to-pcep</id><summary type="html">&lt;p&gt;Нашёл инфу про сертификацию на Python и решил поставить себе цель&lt;/p&gt;</summary><content type="html">&lt;p&gt;Привет!&lt;/p&gt;
&lt;p&gt;Возникла идея поставить цель и сдать сертификаю на Python. Начну с &lt;a href="https://pythoninstitute.org/pcep"&gt;&lt;strong&gt;PCEP&lt;/strong&gt;&lt;/a&gt; - это начальный уровень. 
Здесь планирую помечать основные темы и ссылки по подготовке к ним, поехали с первой секции:&lt;/p&gt;
&lt;h3&gt;Section 1: Computer Programming and Python Fundamentals&lt;/h3&gt;
&lt;h4&gt;PCEP-30-02 1.1 – Understand fundamental terms and definitions&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;interpreting and the interpreter, compilation and the compiler - Разница между интерпретатором и компилятором. Вкратце: &lt;a href="https://forum.itvdn.com/t/urok-1-interpretator-i-kompilyator/2938"&gt;&lt;strong&gt;Интерпретатор и компилятор&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;lexis, syntax, and semantics - Про список слов, правила написания и их смысл &lt;a href="https://info-master.su/programming/profi/programming-languages.php"&gt;&lt;strong&gt;Языки программирования&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;PCEP-30-02 1.2 – Understand Python’s logic and structure&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;keywords - &lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#keywords"&gt;&lt;strong&gt;Keywords&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;instructions - Просто построчная запись&lt;/li&gt;
&lt;li&gt;indentation - Отступы &lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#indentation"&gt;&lt;strong&gt;Indentation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;comments - Комментарии &lt;a href="https://docs.python.org/3/reference/lexical_analysis.html#comments"&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;PCEP-30-02 1.3 – Introduce literals and variables into code and use different numeral systems&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Boolean, integers, floating-point numbers - тут всё просто&lt;/li&gt;
&lt;li&gt;scientific notation - &lt;a href="https://www.scaler.com/topics/python-scientific-notation/"&gt;&lt;strong&gt;Python Scientific Notation&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;strings - тут всё просто&lt;/li&gt;
&lt;li&gt;binary, octal, decimal, and hexadecimal numeral systems - &lt;a href="https://note.nkmk.me/en/python-bin-oct-hex-int-format/"&gt;&lt;strong&gt;Numbers&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;variables - &lt;a href="https://www.geeksforgeeks.org/python-variables/"&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;naming conventions - &lt;a href="https://peps.python.org/pep-0008/#function-and-variable-names"&gt;&lt;strong&gt;PEP8&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;implementing PEP-8 recommendations&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;PCEP-30-02 1.4 – Choose operators and data types adequate to the problem&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;numeric operators: ** * / % // + – &lt;a href="https://www.geeksforgeeks.org/python-arithmetic-operators/"&gt;&lt;strong&gt;Python Arithmetic Operators&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;string operators: * + - &lt;a href="https://www.educba.com/string-operators-in-python/"&gt;&lt;strong&gt;String Operators in Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;assignment and shortcut operators - &lt;a href="https://orclqa.com/python-assignment-shortcut-operators/"&gt;&lt;strong&gt;Assignment and Shortcut Operators&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;unary and binary operators - &lt;a href="https://overiq.com/python-101/operators-in-python/#arithmetic-operators"&gt;&lt;strong&gt;Arithmetic Operators&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;priorities and binding - &lt;a href="https://pythonru.com/uroki/29-prioritetnost-i-associativnost-operatorov-dlja-nachinajushhih"&gt;&lt;strong&gt;Приоритетность и ассоциативность операторов&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;bitwise operators: ~ &amp;amp; ^ | &amp;lt;&amp;lt; &amp;gt;&amp;gt; - &lt;a href="https://wiki.python.org/moin/BitwiseOperators"&gt;&lt;strong&gt;BitwiseOperators&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Boolean operators: not, and, or - &lt;a href="https://www.geeksforgeeks.org/python-logical-operators/"&gt;&lt;strong&gt;Python Logical Operators with Examples&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Boolean expressions&lt;/li&gt;
&lt;li&gt;relational operators ( == != &amp;gt; &amp;gt;= &amp;lt; &amp;lt;= ) - &lt;a href="https://www.geeksforgeeks.org/relational-operators-in-python/"&gt;&lt;strong&gt;Relational Operators in Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the accuracy of floating-point numbers - &lt;a href="https://habr.com/ru/companies/skillfactory/articles/658277/"&gt;&lt;strong&gt;Как работать с числами с плавающей точкой в Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;type casting - &lt;a href="https://codechick.io/tutorials/python/type-conversion-and-casting"&gt;&lt;strong&gt;Преобразование и приведение типов в Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h4&gt;PCEP-30-02 1.5 – Perform Input/Output console operations&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;the print() and input() functions - &lt;a href="https://codechick.io/tutorials/python/input-output-import"&gt;&lt;strong&gt;Ввод, вывод и импорт в Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the sep= and end= keyword parameters - &lt;a href="https://pythonru.com/osnovy/python-print"&gt;&lt;strong&gt;Функция Print() в Python&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;the int() and float() functions&lt;/li&gt;
&lt;/ul&gt;</content><category term="python"></category><category term="python"></category><category term="certification"></category><category term="pcep"></category></entry><entry><title>Как я поднял блог с помощью Pelican</title><link href="https://dkurchigin.github.io/startup-pelican" rel="alternate"></link><published>2023-07-17T16:00:00+03:00</published><updated>2023-07-17T16:00:00+03:00</updated><author><name>dkurchigin</name></author><id>tag:dkurchigin.github.io,2023-07-17:/startup-pelican</id><summary type="html">&lt;p&gt;Моё первое впечатление от Pelican&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Имеем на входе:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Старый блог на Jekyll&lt;/li&gt;
&lt;li&gt;Уже готовый дизайн(html+css)&lt;/li&gt;
&lt;li&gt;Знания Python, Jekyll, Django и Jinja&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Почему я выбрал Pelican:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Свежий проект, сообщество активно контрибьютит&lt;/li&gt;
&lt;li&gt;Страницы генерируются на основе markdown, как и Jekyll&lt;/li&gt;
&lt;li&gt;В темплейтах используется Jinja2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br/&gt;&lt;/p&gt;
&lt;h3&gt;Мой HowTo:&lt;/h3&gt;
&lt;p&gt;1.) Делаем первый шаг &lt;a href="https://docs.getpelican.com/en/latest/install.html"&gt;&lt;strong&gt;отсюда&lt;/strong&gt;&lt;/a&gt;. Устанавливаем Pelican, дополнительные пакеты и выполняем:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    pelican-quickstart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;2.) После создания минимальной структуры проекта я полез в &lt;em&gt;pelicanconf.py&lt;/em&gt;. Помимо основных настроек я прописал свой, к примеру TELEGRAM_USERNAME. Вид моего конфига:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;AUTHOR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;dkurchigin&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SITENAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Типичный Python разработчик&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SITESUBTITLE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;О программировании, мелочах жизни и многом другом...&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SITEURL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;https://dkurchigin.github.io/&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;PATH&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;TIMEZONE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Europe/Moscow&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DEFAULT_LANG&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;Russian&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;TELEGRAM_USERNAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;dirty_rotten_imb&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;GITHUB_USERNAME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;dkurchigin&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;EMAIL&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;kurchigin.dmitry@yandex.ru&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;THEME&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;3.) Для смены стандартной схемы создал &lt;a href="https://docs.getpelican.com/en/latest/themes.html#structure"&gt;&lt;strong&gt;следующую структуру&lt;/strong&gt;&lt;/a&gt; в корне проекта&lt;/p&gt;
&lt;p&gt;&lt;img alt="pelican_structure" src="https://dkurchigin.github.io/theme/images/pelican_structure.JPG"&gt;&lt;/p&gt;
&lt;p&gt;4.) Подсмотреть базовый синтаксис и логику темплейтов можно в &lt;a href="https://github.com/getpelican/pelican/tree/master/pelican/themes"&gt;&lt;strong&gt;стандартной теме&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;5.) Для локального дебага делаю &lt;strong&gt;make html&lt;/strong&gt;, а затем &lt;strong&gt;make serve&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;6.) Для публикации на &lt;strong&gt;Github Pages&lt;/strong&gt; делаю так:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;    &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;html&lt;/span&gt;
    &lt;span class="n"&gt;ghp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;output&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
    &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;7.) В настройках репозитория во вкладке &lt;strong&gt;Pages&lt;/strong&gt; указываю, что необходимо забирать контент из ветки &lt;strong&gt;gh-pages&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="github_pages_settings" src="https://dkurchigin.github.io/theme/images/github_pages_settings.JPG"&gt;&lt;/p&gt;
&lt;p&gt;8.) &lt;strong&gt;ENJOY!&lt;/strong&gt;&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="pelican"></category><category term="blog"></category></entry><entry><title>Переезд с Jekyll на Pelican</title><link href="https://dkurchigin.github.io/moved-from-jekyll" rel="alternate"></link><published>2023-07-16T16:00:00+03:00</published><updated>2023-07-16T16:00:00+03:00</updated><author><name>dkurchigin</name></author><id>tag:dkurchigin.github.io,2023-07-16:/moved-from-jekyll</id><summary type="html">&lt;p&gt;Перенес старый блог с Jekyll на Pelican и скорректировал тематику&lt;/p&gt;</summary><content type="html">&lt;p&gt;Привет, Мир!&lt;/p&gt;
&lt;p&gt;Решил возобновить блогерскую деятельность т.к. возникло куча мыслей и историй, которыми хотелось бы с кем-то поделиться.
Всему виной моя карьера в IT и небольшое количество людей, которые "в теме".&lt;/p&gt;
&lt;p&gt;Что с прошлым блогом?
Последний пост на старом блоге имеет дату пятилетней давности и на днях я решил его оживить. Но к сожалению, часть фичей в &lt;a href="https://jekyllrb.com/"&gt;&lt;strong&gt;Jekyll&lt;/strong&gt;&lt;/a&gt; устарели и перестали работать.&lt;/p&gt;
&lt;p&gt;Поэтому решил взять самый свежий статический генератор сайтов на &lt;strong&gt;Python&lt;/strong&gt; и это &lt;a href="https://docs.getpelican.com/en/latest/"&gt;&lt;strong&gt;Pelican&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="python"></category><category term="pelican"></category><category term="jekyll"></category></entry><entry><title>IP-сканер на Perl</title><link href="https://dkurchigin.github.io/perl-ping" rel="alternate"></link><published>2016-06-02T16:00:00+03:00</published><updated>2016-06-02T16:00:00+03:00</updated><author><name>dkurchigin</name></author><id>tag:dkurchigin.github.io,2016-06-02:/perl-ping</id><summary type="html">&lt;p&gt;Написал простенькую пинговалку на PERL для Windows и Linux&lt;/p&gt;</summary><content type="html">&lt;p&gt;Привет!&lt;/p&gt;
&lt;p&gt;Написал простенькую пинговалку на &lt;strong&gt;PERL&lt;/strong&gt; для &lt;strong&gt;Windows&lt;/strong&gt; и &lt;strong&gt;Linux&lt;/strong&gt;. Сканер можно скачать &lt;a href="https://github.com/dkurchigin/perl/tree/master/ip-scanner"&gt;&lt;strong&gt;здесь&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Сканер позволяет автоматически пинговать адреса из файла &lt;strong&gt;&lt;em&gt;"ip_list"&lt;/em&gt;&lt;/strong&gt; и выводить их состояние на экран.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Внимание:&lt;/strong&gt; Последняя версия сканера реализована с помощью модуля &lt;a href="http://search.cpan.org/dist/perl-5.8.0/lib/Net/Ping.pm"&gt;&lt;strong&gt;Net::Ping&lt;/strong&gt;&lt;/a&gt;, что обеспечивает кроссплатформенность. Для определения статуса ip-адреса используется протокол icmp, поэтому скрипт требует запуска с правами администратора.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Программа поддерживает параметры:&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;-v - Настройка вывода результатов работы. Возможные значения: &lt;strong&gt;&lt;em&gt;only_up&lt;/em&gt;&lt;/strong&gt; и &lt;strong&gt;&lt;em&gt;only_down&lt;/em&gt;&lt;/strong&gt; - показывать только активные и не активные адреса соответственно. По умолчанию отображаются все адреса. &lt;/p&gt;
&lt;p&gt;-c - Путь до файла с адресами. По умолчанию программа берет данные из файла &lt;strong&gt;&lt;em&gt;"ip_list"&lt;/em&gt;&lt;/strong&gt;, значения пути до файла можно задавать как относительным, так и абсолютным. Запуск с параметрами возможен как из консоли, так и по ярлыку. &lt;/p&gt;
&lt;p&gt;-t - время таймаута, задается в секундах, по умолчанию &lt;strong&gt;&lt;em&gt;3с&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Пример:&lt;/strong&gt; &lt;em&gt;perl scanner.pl -v=only_up -c=D:\somefile -t=5&lt;/em&gt;&lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="perl"></category></entry><entry><title>Бубен для главного шамана!</title><link href="https://dkurchigin.github.io/buben" rel="alternate"></link><published>2015-10-08T16:00:00+03:00</published><updated>2015-10-08T16:00:00+03:00</updated><author><name>dkurchigin</name></author><id>tag:dkurchigin.github.io,2015-10-08:/buben</id><summary type="html">&lt;p&gt;На старой работе в свое время дарили бубен… Как главному шаману…&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Шаманский бубен" src="https://dkurchigin.github.io/theme/images/tumblr_nvqnvwKJIt1uh3r1eo1_1280.jpg"&gt;
На старой работе в свое время дарили бубен… Как главному шаману…&lt;/p&gt;</content><category term="python"></category><category term="programming"></category><category term="humor"></category></entry></feed>